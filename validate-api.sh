#!/bin/bash
PROJECT_PATH=$1
ERRORS=0

echo "üîé Validando governan√ßa de APIs em $PROJECT_PATH..."

# 1Ô∏è‚É£ Validar se todas as rotas possuem versionamento (/v1/, /v2/)
ROUTES=$(grep -r 'Route("' $PROJECT_PATH | awk -F'"' '{print $2}' | grep -v "\[controller\]")
for ROUTE in $ROUTES; do
  if [[ ! $ROUTE =~ /v[0-9]+/ ]]; then
    echo "‚ùå Erro: A rota '$ROUTE' n√£o possui versionamento expl√≠cito (ex: /v1/)."
    ERRORS=$((ERRORS+1))
  fi
done


# 2Ô∏è‚É£ Validar kebab-case nas rotas
for ROUTE in $ROUTES; do
  if [[ $ROUTE =~ [A-Z] ]]; then
    echo "‚ùå Erro: A rota '$ROUTE' n√£o est√° em kebab-case."
    ERRORS=$((ERRORS+1))
  fi
done

# 3Ô∏è‚É£ Verificar se existe um arquivo `swagger.json` (opcional)
if [ ! -f "$PROJECT_PATH/swagger.json" ]; then
  echo "‚ö†Ô∏è Aviso: O arquivo 'swagger.json' n√£o foi encontrado. Certifique-se de expor o OpenAPI."
fi

# Finalizar com erro se houverem falhas
if [ $ERRORS -gt 0 ]; then
  echo "‚õî Valida√ß√£o falhou com $ERRORS erros."
  exit 1
else
  echo "‚úÖ Valida√ß√£o conclu√≠da sem erros."
fi

for ROUTE in $ROUTES; do
  if [[ ! $ROUTE =~ ^/api/v[0-9]+/ ]]; then
    echo "‚ùå Erro: A rota '$ROUTE' n√£o segue o padr√£o '/api/vX/'."
    ERRORS=$((ERRORS+1))
  fi
done

for ROUTE in $ROUTES; do
  if [[ $ROUTE =~ "_" ]]; then
    echo "‚ùå Erro: A rota '$ROUTE' cont√©m underscore (_). Use kebab-case."
    ERRORS=$((ERRORS+1))
  fi
done

if grep -r 'Route("' $PROJECT_PATH | grep -v 'Http' > /dev/null; then
  echo "‚ùå Erro: Algumas rotas n√£o especificam m√©todos HTTP. Use [HttpGet], [HttpPost], etc."
  ERRORS=$((ERRORS+1))
fi

for ROUTE in $ROUTES; do
  if [[ $ROUTE =~ "/api/api/" ]]; then
    echo "‚ùå Erro: A rota '$ROUTE' cont√©m '/api/' duplicado."
    ERRORS=$((ERRORS+1))
  fi
done

# Verifica se o nome do controller segue a conven√ß√£o (deve terminar com 'Controller')
for CONTROLLER in $(grep -r 'Controller' $PROJECT_PATH); do
  if [[ ! $CONTROLLER =~ "Controller$" ]]; then
    echo "‚ùå Erro: O nome do controller '$CONTROLLER' n√£o segue a conven√ß√£o 'Controller'."
    ERRORS=$((ERRORS+1))
  fi
done

# Verifica se os par√¢metros de rota est√£o em kebab-case
for ROUTE in $ROUTES; do
  # Extrai par√¢metros de rota entre chaves
  PARAMS=$(echo $ROUTE | grep -oP '{\K[^}]+')

  # Verifica se o par√¢metro n√£o est√° em kebab-case (letras mai√∫sculas)
  if [[ $PARAMS =~ [A-Z] ]]; then
    echo "‚ùå Erro: O par√¢metro '$PARAMS' na rota '$ROUTE' n√£o est√° em kebab-case."
    ERRORS=$((ERRORS+1))
  fi
done


# Verifica se as rotas possuem tipos de resposta adequados, ignorando linhas comentadas
for ROUTE in $(grep -r 'Route("' $PROJECT_PATH); do
  # Ignora linhas comentadas (que come√ßam com //)
  if ! grep -q "//" <<< "$ROUTE"; then
    if [[ ! $ROUTE =~ "ProducesResponseType" ]]; then
      echo "‚ùå Erro: A rota '$ROUTE' n√£o tem tipos de resposta padr√£o definidos."
      ERRORS=$((ERRORS+1))
    fi
  fi
done